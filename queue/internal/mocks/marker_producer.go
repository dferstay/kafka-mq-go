// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	kafka "github.com/confluentinc/confluent-kafka-go/kafka"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MarkerProducer is an autogenerated mock type for the MarkerProducer type
type MarkerProducer struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *MarkerProducer) Close() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendEndMarker provides a mock function with given fields: queueID, msg
func (_m *MarkerProducer) SendEndMarker(queueID string, msg *kafka.Message) error {
	ret := _m.Called(queueID, msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *kafka.Message) error); ok {
		r0 = rf(queueID, msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendKeepAliveMarker provides a mock function with given fields: queueID, msg, redeliveryTimeout
func (_m *MarkerProducer) SendKeepAliveMarker(queueID string, msg *kafka.Message, redeliveryTimeout time.Duration) error {
	ret := _m.Called(queueID, msg, redeliveryTimeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *kafka.Message, time.Duration) error); ok {
		r0 = rf(queueID, msg, redeliveryTimeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendStartMarker provides a mock function with given fields: queueID, msg, redeliveryTimeout
func (_m *MarkerProducer) SendStartMarker(queueID string, msg *kafka.Message, redeliveryTimeout time.Duration) error {
	ret := _m.Called(queueID, msg, redeliveryTimeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *kafka.Message, time.Duration) error); ok {
		r0 = rf(queueID, msg, redeliveryTimeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
